// Steganograph class used to encode files into images
// Author MARSOT Mathieu
// January 2019
// Requires OpenCV version 3.4.2

#pragma once
#include "opencv2/highgui/highgui.hpp"
#include "opencv2/core/core.hpp"
#include "opencv2/imgproc/imgproc.hpp"

#include <iostream>
#include <vector>	
#include <fstream>
#include <stdexcept>

constexpr std::size_t BITS_PER_BYTE = std::numeric_limits<uchar>::digits;
constexpr std::size_t BITS_PER_INT = sizeof(size_t)*BITS_PER_BYTE;

enum SG_FLAGS { SG_NOISE = 1, SG_SCRAMBLE = 2,SG_COLOR_MESSAGE=4,SG_SHOWBINARY=8 };
class Steganograph
{

	const char* password;

	/** djb2 hash algorithm,
	 *	convert a string into a number 
	 *	Source: http://www.cse.yorku.ca/~oz/hash.html 
	 */
	uint hash(const char *str);

	/**
	 * Add gaussian noise to the matrix m,
	 * the noise is generated by the random number generator rng
	 */
	void addNoise(cv::RNG& rng, cv::Mat& m);

public:

	///Constructors

	Steganograph();

	/*pwd determines a seed for the random number generation
	 */
	Steganograph(const char* pwd);

	///Destructor
	~Steganograph();

	/**
	 *	Encode a binary message image in a carrier image
	 *  @param carrier is the carrier image
	 *  @param message is the message to encode
	 *  @param filedst,if not null the encoded message will be saved in this file
	 *	@param flags ; SG_SCRAMBLE specify that the signal is scrambled during encoding
	 *				   SG_NOISE is used if noise should be applied to carrier image to hide the message 
	 *	@return the encoded message
	 */
	cv::Mat encodeMat(const cv::Mat& carrier, const cv::Mat& message,int flags = (SG_SCRAMBLE | SG_NOISE), const char* filedst=nullptr );

	/**
	 *	Encode a file in a carrier image
	 *  @param carrier is the carrier image
	 *  @param message is the path to the message file
	 *	@param flags ; SG_SCRAMBLE specify that the signal is scrambled during encoding
	 *				   SG_NOISE is used if noise should be applied to carrier image to hide the message
	 *  @param filedst,if not null the encoded message will be saved in this file
	 *	@return the encoded message
	 */
	cv::Mat encodeFile(const cv::Mat& carrier, const char* message, int flags = (SG_SCRAMBLE | SG_NOISE),const char* filedst=nullptr);

	/**
	 *	Decode a binary message 
	 *  @param carrier is the carrier image used for encoding
	 *  @param message is the encoded message
	 *	@param flags ; SG_SCRAMBLE specify that the signal is scrambled during encoding
	 *				   SG_NOISE is used if noise should be applied to carrier image to hide the message
	 *  @param filedst,if not null the decoded message will be saved in this file
	 *	@return the decoded message
	 */
	cv::Mat decodeMat(const cv::Mat& carrier, const cv::Mat& message, int flags = (SG_SCRAMBLE | SG_NOISE), const char* filedst=nullptr);

	/**
	 *	Decode an encoded file from an image 
	 *  @param carrier is the carrier image
	 *  @param message is the encoded message
	 *  @param filedst, the encoded message will be saved in this file
	 *	@param flags ; SG_SCRAMBLE specify that the signal is scrambled during encoding
	 *				   SG_NOISE is used if noise should be applied to carrier image to hide the message
	 */
	void decodeFile(const cv::Mat& carrier, const cv::Mat& message,  const char* filedst, int flags = (SG_SCRAMBLE | SG_NOISE));
	
	///Mutators
	Steganograph& setPwd(const char *newPwd);
};

